//synchronous = solidity
//asynchronous = javascript
const ethers = require("ethers")
const fs = require("fs-extra")
require("dotenv").config()

//la programacion asincrona sirve para ejecutar metodos
//mientras otros estan siendo ejecutados

async function main() {
    //deploy a contract? wait for it to be deployed
    //contract.deploy -> wouldnt wait for it to finish
    //http://127.0.0.1:7545
    const provider = new ethers.providers.JsonRpcBatchProvider(
        "http://127.0.0.1:7545"
        //aqui va el servidor rpc de la blockchain a la que nos vamos a conectar
        //para obtener datos y desplegar contratos
    )

    //usamos las variables de entorno con el .env para el servidor RPC
    //incluyendo require("dotenv").config();
    const provider2 = new ethers.providers.JsonRpcBatchProvider(
        process.env.RPC_URL
        //aqui va el servidor rpc de la blockchain a la que nos vamos a conectar
        //para obtener datos y desplegar contratos
    )

    //creacion de wallet con clave privada para poder firmar las transacciones

    const wallet = new ethers.Wallet(
        "94d8a88094e3ee06d57781f45fcd2cb5f2c91d47c1e5f81d1b6b32871f69213c",
        provider2
    )

    //no es bueno tener la private key en codigo hacemos un .env
    //const wallet2 = new ethers.Wallet(process.env.PRIV_KEY, provider2);

    //se puede mejorar la creacion y gestion de la billetera encriptando la clave privada del .env y eliminandola
    // creando un script .encryotedKey.json que luego se añadirá al .gitignore
    const encyptedJson = fs.readFileSync("./.encryptedKey.json", "utf-8")
    let wallet3 = new ethers.Wallet.fromEncryptedJsonSync(
        encyptedJson,
        process.env.PRIV_KEY_PASS
    )

    wallet3 = await wallet3.connect(provider2)

    const abi = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.json",
        "utf-8"
    )
    const binary = fs.readFileSync(
        "./SimpleStorage_sol_SimpleStorage.bin",
        "utf-8"
    )

    //en las funciones asincronas podemos utilizar la keyword
    //await, que significa que debe esperarse a que la promesa que se devuelve sea
    //aceptada o rechazada para pasar a la siguiente ejecucion

    // async function setUpMovie() {
    //   await cookPopcorn();
    //   await pourDrinks();
    // }

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet3)
    console.log("Deploying, please wait...")
    //const contract = await contractFactory.deploy({gasPrice:1000000000}); //wait contract deploying

    const contract = await contractFactory.deploy() //podemos modificar gasPrice y gasLimit como argumentos
    await contract.deployTransaction.wait(1) //esto muestra la informacion de la transaccion del deploy del contrato, espera confirmacion de 1 bloque
    /*console.log("Deployment transaction: ");
  console.log(contract.deployTransaction); //esto es la transaccion del lanzamiento del contrato
  console.log("Transaction receipt:");
  console.log(deploymentReceipt); esto es la transaccion que se obtiene cuando se recibe una confirmacion de bloque*/

    //ESTO ES PARA MANDAR TRANSACCIONES
    //////////////////////

    // console.log("Deploy with only transaction data");
    // const nonce = await wallet.getTransactionCount();
    // const tx = {
    //   nonce: nonce, //el valor de nonce para cada transaccion es unica, las billeteras usan un valor para cada transaccion
    //   gasPrice: 20000000000,
    //   gasLimit: 1000000,
    //   to: null,
    //   value: 0,
    //   data: "",
    //   //data es el contenido del binario SimpleStorage_sol_....bin
    //   chainId: 5777,
    // };

    // //const signedTxResponse = await wallet.signTransaction(tx); esto no es necesario ya que en el metodo send transaction ya ejecuta sign transaction
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1); //esperamos una confirmacion de bloque para continuar
    // console.log(sentTxResponse);

    ///////////////////////////////////////

    //VAMOS A HACERLO MAS FACIL interactuando con el contrato con su abi
    const currentFavNumber = await contract.retrieve()
    console.log(`Current fav number: ${currentFavNumber.toString()}`)

    const txResponse = await contract.store("7")
    const txReceipt = await txResponse.wait(1)
    const updatedFavNumber = await contract.retrieve()
    console.log(`Updated favorite number is: ${updatedFavNumber}`)
    //hacemos esto porque contract.store devuelve una transaccion y luego debe esperarse una confirmacion de bloque para obtener los datos de la transaccion
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error)
        process.exit(1)
    })

//ganache es una fake blockchain local para probar cosas

//go-ethereum es para tener nodos propios

//alchemy nos proporciona un nodo para desplegar contratos
